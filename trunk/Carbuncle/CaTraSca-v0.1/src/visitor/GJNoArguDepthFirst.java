//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "CaTraSca"
    * f1 -> "{"
    * f2 -> [ Continue() ]
    * f3 -> Magazzino()
    * f4 -> ";"
    * f5 -> ( DescrizionePeriodo() )+
    * f6 -> "}"
    */
   public R visit(Scope n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "CONTINUE"
    * f1 -> "="
    * f2 -> <BOOL>
    */
   public R visit(Continue n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "MAGAZZINO"
    * f1 -> NomeComposto()
    * f2 -> [ Indirizzo() ]
    */
   public R visit(Magazzino n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> "VIA"
    * f2 -> NomeComposto()
    * f3 -> [ NumeroCivico() ]
    * f4 -> ","
    * f5 -> <NUM>
    * f6 -> NomeComposto()
    */
   public R visit(Indirizzo n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> ", N."
    * f1 -> <NUM>
    */
   public R visit(NumeroCivico n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> Periodo()
    * f2 -> [ Giacenza() ";" ]
    * f3 -> "{"
    * f4 -> ( Azione() )+
    * f5 -> "}"
    * f6 -> "}"
    */
   public R visit(DescrizionePeriodo n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "DA"
    * f1 -> Data()
    * f2 -> "A"
    * f3 -> Data()
    * f4 -> ";"
    */
   public R visit(Periodo n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> <NUM>
    * f1 -> "-"
    * f2 -> <MESE>
    * f3 -> "-"
    * f4 -> <NUM>
    */
   public R visit(Data n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "GIACENZA INIZIALE:"
    * f1 -> Residuo()
    * f2 -> ( "," Residuo() )*
    */
   public R visit(Giacenza n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Prodotto()
    * f1 -> "QUANTITA"
    * f2 -> <NUM>
    */
   public R visit(Residuo n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "MARCA"
    * f1 -> NomeComposto()
    * f2 -> "MODELLO"
    * f3 -> NomeComposto()
    */
   public R visit(Prodotto n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( Movimento() | Trasformazione() )
    * f1 -> ";"
    */
   public R visit(Azione n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> <MOVIMENTO>
    * f1 -> ":"
    * f2 -> ( Residuo() )+
    */
   public R visit(Movimento n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "TRASFORMAZIONE:"
    * f1 -> Materia()
    * f2 -> ( "+" Materia() )*
    * f3 -> "="
    * f4 -> Materia()
    * f5 -> ( "+" Materia() )*
    */
   public R visit(Trasformazione n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> <NUM>
    * f2 -> Prodotto()
    * f3 -> ")"
    */
   public R visit(Materia n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <NOME>
    * f1 -> ( <NOME> )*
    */
   public R visit(NomeComposto n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

}
