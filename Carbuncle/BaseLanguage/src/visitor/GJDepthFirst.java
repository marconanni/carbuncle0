//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> SezioneA()
    * f1 -> SezioneB()
    * f2 -> "{"
    * f3 -> SezioneC()
    * f4 -> "}"
    */
   public R visit(S n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Squadre()
    * f1 -> Arbitro()
    */
   public R visit(SezioneA n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "Squadra Ospite:"
    * f1 -> <NOME>
    * f2 -> ","
    * f3 -> "Squadra Casa:"
    * f4 -> <NOME>
    * f5 -> ";"
    */
   public R visit(Squadre n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "Arbitro:"
    * f1 -> <NOME>
    * f2 -> ";"
    */
   public R visit(Arbitro n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ListaLineUp()
    */
   public R visit(SezioneB n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "Line-Up squadra ospite:"
    * f1 -> LineUp()
    * f2 -> ";"
    * f3 -> "Line-Up squadra casa:"
    * f4 -> LineUp()
    * f5 -> ";"
    */
   public R visit(ListaLineUp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Giocatore()
    * f1 -> ","
    * f2 -> Giocatore()
    * f3 -> ","
    * f4 -> Giocatore()
    * f5 -> ","
    * f6 -> Giocatore()
    * f7 -> ","
    * f8 -> Giocatore()
    * f9 -> ","
    * f10 -> Giocatore()
    * f11 -> ","
    * f12 -> Giocatore()
    * f13 -> ","
    * f14 -> Giocatore()
    * f15 -> ","
    * f16 -> Giocatore()
    */
   public R visit(LineUp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <NOME>
    * f1 -> <CIFRA_NON_NULLA>
    * f2 -> <POSIZIONE_DIFESA>
    */
   public R visit(Giocatore n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( Inning() )+
    */
   public R visit(SezioneC n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "Attacco squadra ospite:"
    * f1 -> Attacco()
    * f2 -> "Attacco squadra casa:"
    * f3 -> Attacco()
    */
   public R visit(Inning n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( "(" Battuta() ")" )+
    */
   public R visit(Attacco n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( Lancio() )+
    */
   public R visit(Battuta n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Giocatore()
    * f1 -> ","
    * f2 -> EffettoBattuta()
    * f3 -> ";"
    */
   public R visit(Lancio n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PallaBattuta()
    *       | PallaNonBattuta()
    */
   public R visit(EffettoBattuta n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Esito()
    * f1 -> ( Avanzamento() )*
    */
   public R visit(PallaBattuta n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <TIPO_LANCIO>
    * f1 -> ( Esito() )?
    * f2 -> ( Avanzamento() )*
    */
   public R visit(PallaNonBattuta n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrivoInBase()
    *       | Eliminazione()
    */
   public R visit(Esito n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Giocatore()
    * f1 -> Esito()
    */
   public R visit(Avanzamento n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Base()
    *       | BaseSuBall()
    *       | Interferenza()
    *       | BaseRubata()
    *       | Errore()
    *       | Colpito()
    */
   public R visit(ArrivoInBase n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> StrikeOut()
    *       | OutVolo()
    *       | OutSuBase()
    *       | OutRubata()
    */
   public R visit(Eliminazione n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <BASE>
    */
   public R visit(Base n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <BASE_SU_BALL>
    */
   public R visit(BaseSuBall n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <COLPITO>
    */
   public R visit(Colpito n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTERFERENZA>
    */
   public R visit(Interferenza n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <BASE_RUBATA>
    * f1 -> <BASE>
    */
   public R visit(BaseRubata n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <ERRORE>
    * f1 -> <CIFRA_NON_NULLA>
    * f2 -> <BASE>
    */
   public R visit(Errore n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <K>
    */
   public R visit(StrikeOut n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <OUT_VOLO>
    * f1 -> <CIFRA_NON_NULLA>
    */
   public R visit(OutVolo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <CIFRA_NON_NULLA>
    * f1 -> <CIFRA_NON_NULLA>
    */
   public R visit(OutSuBase n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <OUT_RUBATA>
    * f1 -> <CIFRA_NON_NULLA>
    */
   public R visit(OutRubata n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
