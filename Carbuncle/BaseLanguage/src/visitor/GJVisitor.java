//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * All GJ visitors must implement this interface.
 */

public interface GJVisitor<R,A> {

   //
   // GJ Auto class visitors
   //

   public R visit(NodeList n, A argu);
   public R visit(NodeListOptional n, A argu);
   public R visit(NodeOptional n, A argu);
   public R visit(NodeSequence n, A argu);
   public R visit(NodeToken n, A argu);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> SezioneA()
    * f1 -> SezioneB()
    * f2 -> "{"
    * f3 -> SezioneC()
    * f4 -> "}"
    */
   public R visit(S n, A argu);

   /**
    * f0 -> Squadre()
    * f1 -> Arbitro()
    */
   public R visit(SezioneA n, A argu);

   /**
    * f0 -> "Squadra Ospite:"
    * f1 -> <NOME>
    * f2 -> ","
    * f3 -> "Squadra Casa:"
    * f4 -> <NOME>
    * f5 -> ";"
    */
   public R visit(Squadre n, A argu);

   /**
    * f0 -> "Arbitro:"
    * f1 -> <NOME>
    * f2 -> ";"
    */
   public R visit(Arbitro n, A argu);

   /**
    * f0 -> ListaLineUp()
    */
   public R visit(SezioneB n, A argu);

   /**
    * f0 -> "Line-Up squadra ospite:"
    * f1 -> LineUp()
    * f2 -> ";"
    * f3 -> "Line-Up squadra casa:"
    * f4 -> LineUp()
    * f5 -> ";"
    */
   public R visit(ListaLineUp n, A argu);

   /**
    * f0 -> Giocatore()
    * f1 -> ","
    * f2 -> Giocatore()
    * f3 -> ","
    * f4 -> Giocatore()
    * f5 -> ","
    * f6 -> Giocatore()
    * f7 -> ","
    * f8 -> Giocatore()
    * f9 -> ","
    * f10 -> Giocatore()
    * f11 -> ","
    * f12 -> Giocatore()
    * f13 -> ","
    * f14 -> Giocatore()
    * f15 -> ","
    * f16 -> Giocatore()
    */
   public R visit(LineUp n, A argu);

   /**
    * f0 -> <NOME>
    * f1 -> <CIFRA_NON_NULLA>
    * f2 -> <POSIZIONE_DIFESA>
    */
   public R visit(Giocatore n, A argu);

   /**
    * f0 -> ( Inning() )+
    */
   public R visit(SezioneC n, A argu);

   /**
    * f0 -> "Attacco squadra ospite:"
    * f1 -> Attacco()
    * f2 -> "Attacco squadra casa:"
    * f3 -> Attacco()
    */
   public R visit(Inning n, A argu);

   /**
    * f0 -> ( "(" Battuta() ")" )+
    */
   public R visit(Attacco n, A argu);

   /**
    * f0 -> ( Lancio() )+
    */
   public R visit(Battuta n, A argu);

   /**
    * f0 -> Giocatore()
    * f1 -> ","
    * f2 -> EffettoBattuta()
    * f3 -> ";"
    */
   public R visit(Lancio n, A argu);

   /**
    * f0 -> PallaBattuta()
    *       | PallaNonBattuta()
    */
   public R visit(EffettoBattuta n, A argu);

   /**
    * f0 -> Esito()
    * f1 -> ( Avanzamento() )*
    */
   public R visit(PallaBattuta n, A argu);

   /**
    * f0 -> <TIPO_LANCIO>
    * f1 -> ( Esito() )?
    * f2 -> ( Avanzamento() )*
    */
   public R visit(PallaNonBattuta n, A argu);

   /**
    * f0 -> ArrivoInBase()
    *       | Eliminazione()
    */
   public R visit(Esito n, A argu);

   /**
    * f0 -> Giocatore()
    * f1 -> Esito()
    */
   public R visit(Avanzamento n, A argu);

   /**
    * f0 -> Base()
    *       | BaseSuBall()
    *       | Interferenza()
    *       | BaseRubata()
    *       | Errore()
    *       | Colpito()
    */
   public R visit(ArrivoInBase n, A argu);

   /**
    * f0 -> StrikeOut()
    *       | OutVolo()
    *       | OutSuBase()
    *       | OutRubata()
    */
   public R visit(Eliminazione n, A argu);

   /**
    * f0 -> <BASE>
    */
   public R visit(Base n, A argu);

   /**
    * f0 -> <BASE_SU_BALL>
    */
   public R visit(BaseSuBall n, A argu);

   /**
    * f0 -> <COLPITO>
    */
   public R visit(Colpito n, A argu);

   /**
    * f0 -> <INTERFERENZA>
    */
   public R visit(Interferenza n, A argu);

   /**
    * f0 -> <BASE_RUBATA>
    * f1 -> <BASE>
    */
   public R visit(BaseRubata n, A argu);

   /**
    * f0 -> <ERRORE>
    * f1 -> <CIFRA_NON_NULLA>
    * f2 -> <BASE>
    */
   public R visit(Errore n, A argu);

   /**
    * f0 -> <K>
    */
   public R visit(StrikeOut n, A argu);

   /**
    * f0 -> <OUT_VOLO>
    * f1 -> <CIFRA_NON_NULLA>
    */
   public R visit(OutVolo n, A argu);

   /**
    * f0 -> <CIFRA_NON_NULLA>
    * f1 -> <CIFRA_NON_NULLA>
    */
   public R visit(OutSuBase n, A argu);

   /**
    * f0 -> <OUT_RUBATA>
    * f1 -> <CIFRA_NON_NULLA>
    */
   public R visit(OutRubata n, A argu);

}
