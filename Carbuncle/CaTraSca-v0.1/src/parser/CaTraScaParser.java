package parser;

/* Generated By:JavaCC: Do not edit this line. CaTraScaParser.java */
import syntaxtree.*;


public class CaTraScaParser implements CaTraScaParserConstants {

  static final public Scope Scope() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   Continue n5;
   Magazzino n6;
   NodeToken n7;
   Token n8;
   NodeList n9 = new NodeList();
   DescrizionePeriodo n10;
   NodeToken n11;
   Token n12;
    n1 = jj_consume_token(1);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(2);
            n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 5:
      n5 = Continue();
        n4.addNode(n5);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    n6 = Magazzino();
    n8 = jj_consume_token(3);
            n7 = JTBToolkit.makeNodeToken(n8);
    label_1:
    while (true) {
      n10 = DescrizionePeriodo();
        n9.addNode(n10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
     n9.nodes.trimToSize();
    n12 = jj_consume_token(4);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Scope(n0,n2,n4,n6,n7,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public Continue Continue() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(5);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(6);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(BOOL);
               n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Continue(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Magazzino Magazzino() throws ParseException {
   NodeToken n0;
   Token n1;
   NomeComposto n2;
   NodeOptional n3 = new NodeOptional();
   Indirizzo n4;
    n1 = jj_consume_token(7);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = NomeComposto();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
      n4 = Indirizzo();
        n3.addNode(n4);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
     {if (true) return new Magazzino(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Indirizzo Indirizzo() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NomeComposto n4;
   NodeOptional n5 = new NodeOptional();
   NumeroCivico n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NomeComposto n11;
    n1 = jj_consume_token(8);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(9);
              n2 = JTBToolkit.makeNodeToken(n3);
    n4 = NomeComposto();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 10:
      n6 = NumeroCivico();
        n5.addNode(n6);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    n8 = jj_consume_token(8);
            n7 = JTBToolkit.makeNodeToken(n8);
    n10 = jj_consume_token(NUM);
               n9 = JTBToolkit.makeNodeToken(n10);
    n11 = NomeComposto();
     {if (true) return new Indirizzo(n0,n2,n4,n5,n7,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public NumeroCivico NumeroCivico() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(10);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(NUM);
              n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new NumeroCivico(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public DescrizionePeriodo DescrizionePeriodo() throws ParseException {
   NodeToken n0;
   Token n1;
   Periodo n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   Giacenza n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeList n10 = new NodeList();
   Azione n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
    n1 = jj_consume_token(2);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Periodo();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
        n4 = new NodeSequence(2);
      n5 = Giacenza();
        n4.addNode(n5);
      n7 = jj_consume_token(3);
               n6 = JTBToolkit.makeNodeToken(n7);
        n4.addNode(n6);
        n3.addNode(n4);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    n9 = jj_consume_token(2);
            n8 = JTBToolkit.makeNodeToken(n9);
    label_2:
    while (true) {
      n11 = Azione();
        n10.addNode(n11);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
      case MOVIMENTO:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
    }
     n10.nodes.trimToSize();
    n13 = jj_consume_token(4);
             n12 = JTBToolkit.makeNodeToken(n13);
    n15 = jj_consume_token(4);
             n14 = JTBToolkit.makeNodeToken(n15);
     {if (true) return new DescrizionePeriodo(n0,n2,n3,n8,n10,n12,n14);}
    throw new Error("Missing return statement in function");
  }

  static final public Periodo Periodo() throws ParseException {
   NodeToken n0;
   Token n1;
   Data n2;
   NodeToken n3;
   Token n4;
   Data n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(11);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Data();
    n4 = jj_consume_token(12);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Data();
    n7 = jj_consume_token(3);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new Periodo(n0,n2,n3,n5,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public Data Data() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(NUM);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(13);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(MESE);
               n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(13);
            n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(NUM);
              n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Data(n0,n2,n4,n6,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public Giacenza Giacenza() throws ParseException {
   NodeToken n0;
   Token n1;
   Residuo n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Residuo n7;
    n1 = jj_consume_token(14);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Residuo();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(8);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = Residuo();
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
     {if (true) return new Giacenza(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Residuo Residuo() throws ParseException {
   Prodotto n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    n0 = Prodotto();
    n2 = jj_consume_token(15);
                   n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(NUM);
              n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new Residuo(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Prodotto Prodotto() throws ParseException {
   NodeToken n0;
   Token n1;
   NomeComposto n2;
   NodeToken n3;
   Token n4;
   NomeComposto n5;
    n1 = jj_consume_token(16);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = NomeComposto();
    n4 = jj_consume_token(17);
                  n3 = JTBToolkit.makeNodeToken(n4);
    n5 = NomeComposto();
     {if (true) return new Prodotto(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public Azione Azione() throws ParseException {
   NodeChoice n0;
   Movimento n1;
   Trasformazione n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOVIMENTO:
      n1 = Movimento();
           n0 = new NodeChoice(n1, 0);
      break;
    case 19:
      n2 = Trasformazione();
           n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n4 = jj_consume_token(3);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new Azione(n0,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Movimento Movimento() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeList n4 = new NodeList();
   Residuo n5;
    n1 = jj_consume_token(MOVIMENTO);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(18);
            n2 = JTBToolkit.makeNodeToken(n3);
    label_4:
    while (true) {
      n5 = Residuo();
        n4.addNode(n5);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
    }
     n4.nodes.trimToSize();
     {if (true) return new Movimento(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Trasformazione Trasformazione() throws ParseException {
   NodeToken n0;
   Token n1;
   Materia n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Materia n7;
   NodeToken n8;
   Token n9;
   Materia n10;
   NodeListOptional n11 = new NodeListOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Materia n15;
    n1 = jj_consume_token(19);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Materia();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(20);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = Materia();
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    n9 = jj_consume_token(6);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Materia();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
        n12 = new NodeSequence(2);
      n14 = jj_consume_token(20);
                n13 = JTBToolkit.makeNodeToken(n14);
        n12.addNode(n13);
      n15 = Materia();
        n12.addNode(n15);
        n11.addNode(n12);
    }
     n11.nodes.trimToSize();
     {if (true) return new Trasformazione(n0,n2,n3,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public Materia Materia() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Prodotto n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(21);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(NUM);
              n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Prodotto();
    n6 = jj_consume_token(22);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Materia(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public NomeComposto NomeComposto() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(NOME);
               n0 = JTBToolkit.makeNodeToken(n1);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOME:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      n4 = jj_consume_token(NOME);
                  n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
     {if (true) return new NomeComposto(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CaTraScaParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0x4,0x100,0x400,0x4000,0x20080000,0x100,0x20080000,0x10000,0x100000,0x100000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,};
   }

  /** Constructor with InputStream. */
  public CaTraScaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CaTraScaParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CaTraScaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CaTraScaParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CaTraScaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CaTraScaParser(CaTraScaParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CaTraScaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
